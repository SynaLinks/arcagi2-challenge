{
  "module": "synalinks.src.programs.functional",
  "class_name": "Functional",
  "config": {
    "name": "arcagi_task_25e02866",
    "trainable": true,
    "modules": [
      {
        "module": "synalinks.modules",
        "class_name": "InputModule",
        "config": {
          "schema": {
            "$defs": {
              "ARCAGITask": {
                "additionalProperties": false,
                "description": "Single transformation example",
                "properties": {
                  "input_grid": {
                    "description": "The input grid (list of integer list)",
                    "items": {
                      "items": {
                        "$ref": "#/$defs/Color"
                      },
                      "type": "array"
                    },
                    "title": "Input Grid",
                    "type": "array"
                  },
                  "output_grid": {
                    "description": "The output grid (list of integer list)",
                    "items": {
                      "items": {
                        "$ref": "#/$defs/Color"
                      },
                      "type": "array"
                    },
                    "title": "Output Grid",
                    "type": "array"
                  }
                },
                "required": [
                  "input_grid",
                  "output_grid"
                ],
                "title": "ARCAGITask",
                "type": "object"
              },
              "Color": {
                "description": "ARC-AGI color palette",
                "enum": [
                  0,
                  1,
                  2,
                  3,
                  4,
                  5,
                  6,
                  7,
                  8,
                  9
                ],
                "title": "Color",
                "type": "integer"
              }
            },
            "additionalProperties": false,
            "description": "Input for the ARC-AGI solver",
            "properties": {
              "examples": {
                "description": "A set of transformation examples",
                "items": {
                  "$ref": "#/$defs/ARCAGITask"
                },
                "title": "Examples",
                "type": "array"
              },
              "input_grid": {
                "description": "The input grid (list of integer list)",
                "items": {
                  "items": {
                    "$ref": "#/$defs/Color"
                  },
                  "type": "array"
                },
                "title": "Input Grid",
                "type": "array"
              }
            },
            "required": [
              "examples",
              "input_grid"
            ],
            "title": "ARCAGIInput",
            "type": "object"
          },
          "optional": false,
          "name": "input_module_361",
          "description": "Defines the input data model for a program."
        },
        "registered_name": null,
        "name": "input_module_361",
        "inbound_nodes": []
      },
      {
        "module": "synalinks.modules",
        "class_name": "PythonSynthesis",
        "config": {
          "schema": {
            "$defs": {
              "Color": {
                "description": "ARC-AGI color palette",
                "enum": [
                  0,
                  1,
                  2,
                  3,
                  4,
                  5,
                  6,
                  7,
                  8,
                  9
                ],
                "title": "Color",
                "type": "integer"
              }
            },
            "additionalProperties": false,
            "description": "Output from the ARC-AGI solver",
            "properties": {
              "output_grid": {
                "description": "The output grid (list of integer list)",
                "items": {
                  "items": {
                    "$ref": "#/$defs/Color"
                  },
                  "type": "array"
                },
                "title": "Output Grid",
                "type": "array"
              }
            },
            "required": [
              "output_grid"
            ],
            "title": "ARCAGIOutput",
            "type": "object"
          },
          "python_script": "\ndef transform(inputs):\n    # TODO implement the python function to transform the input grid into the output grid\n    return {\"output_grid\": inputs.get(\"input_grid\")}\n    \nresult = transform(inputs)\n",
          "seed_scripts": [],
          "default_return_value": {
            "output_grid": [
              []
            ]
          },
          "name": "python_synthesis_361",
          "description": "A code Python code transformation on JSON data.",
          "trainable": true
        },
        "registered_name": null,
        "name": "python_synthesis_361",
        "inbound_nodes": [
          {
            "args": [
              {
                "class_name": "__symbolic_data_model__",
                "config": {
                  "schema": {
                    "$defs": {
                      "ARCAGITask": {
                        "additionalProperties": false,
                        "description": "Single transformation example",
                        "properties": {
                          "input_grid": {
                            "description": "The input grid (list of integer list)",
                            "items": {
                              "items": {
                                "$ref": "#/$defs/Color"
                              },
                              "type": "array"
                            },
                            "title": "Input Grid",
                            "type": "array"
                          },
                          "output_grid": {
                            "description": "The output grid (list of integer list)",
                            "items": {
                              "items": {
                                "$ref": "#/$defs/Color"
                              },
                              "type": "array"
                            },
                            "title": "Output Grid",
                            "type": "array"
                          }
                        },
                        "required": [
                          "input_grid",
                          "output_grid"
                        ],
                        "title": "ARCAGITask",
                        "type": "object"
                      },
                      "Color": {
                        "description": "ARC-AGI color palette",
                        "enum": [
                          0,
                          1,
                          2,
                          3,
                          4,
                          5,
                          6,
                          7,
                          8,
                          9
                        ],
                        "title": "Color",
                        "type": "integer"
                      }
                    },
                    "additionalProperties": false,
                    "description": "Input for the ARC-AGI solver",
                    "properties": {
                      "examples": {
                        "description": "A set of transformation examples",
                        "items": {
                          "$ref": "#/$defs/ARCAGITask"
                        },
                        "title": "Examples",
                        "type": "array"
                      },
                      "input_grid": {
                        "description": "The input grid (list of integer list)",
                        "items": {
                          "items": {
                            "$ref": "#/$defs/Color"
                          },
                          "type": "array"
                        },
                        "title": "Input Grid",
                        "type": "array"
                      }
                    },
                    "required": [
                      "examples",
                      "input_grid"
                    ],
                    "title": "ARCAGIInput",
                    "type": "object"
                  },
                  "synalinks_history": [
                    "input_module_361",
                    0,
                    0
                  ]
                }
              }
            ],
            "kwargs": {
              "training": false
            }
          }
        ]
      }
    ],
    "input_modules": [
      [
        "input_module_361",
        0,
        0
      ]
    ],
    "output_modules": [
      [
        "python_synthesis_361",
        0,
        0
      ]
    ]
  },
  "registered_name": "Functional",
  "compile_config": {
    "optimizer": {
      "module": "synalinks.optimizers",
      "class_name": "OMEGA",
      "config": {
        "k_nearest_fitter": 5,
        "mutation_temperature": 1.0,
        "crossover_temperature": 1.0,
        "few_shot_learning": false,
        "nb_min_examples": 1,
        "nb_max_examples": 3,
        "sampling_temperature": 1.0,
        "merging_rate": 0.02,
        "population_size": 10,
        "name": "omega_361",
        "description": "OMEGA: OptiMizEr as Genetic Algorithm - A genetic optimizer with dominated novelty search.",
        "language_model": {
          "module": "synalinks",
          "class_name": "LanguageModel",
          "config": {
            "model": "xai/grok-code-fast-1",
            "api_base": null,
            "timeout": 600,
            "retry": 5,
            "caching": false
          },
          "registered_name": null
        },
        "embedding_model": {
          "module": "synalinks",
          "class_name": "EmbeddingModel",
          "config": {
            "model": "ollama/mxbai-embed-large",
            "api_base": "http://localhost:11434",
            "retry": 5
          },
          "registered_name": null
        }
      },
      "registered_name": null
    },
    "reward": {
      "module": "synalinks.rewards",
      "class_name": "RewardFunctionWrapper",
      "config": {
        "name": "reward_function_wrapper_361",
        "reduction": "mean",
        "in_mask": [
          "output_grid"
        ],
        "out_mask": null,
        "fn": {
          "module": "builtins",
          "class_name": "function",
          "config": "Custom>grid_similarity",
          "registered_name": "function"
        }
      },
      "registered_name": null
    },
    "reward_weights": null,
    "metrics": [
      {
        "module": "synalinks.metrics",
        "class_name": "MeanMetricWrapper",
        "config": {
          "in_mask": [
            "output_grid"
          ],
          "out_mask": null,
          "name": "exact_match",
          "fn": {
            "module": "builtins",
            "class_name": "function",
            "config": "exact_match",
            "registered_name": "function"
          }
        },
        "registered_name": null
      }
    ],
    "run_eagerly": false,
    "steps_per_execution": 1
  },
  "variables": {
    "trainable_variables": {
      "python_synthesis_361": {
        "state_python_synthesis_361": {
          "examples": [],
          "current_predictions": [],
          "predictions": [
            {
              "inputs": {
                "examples": [
                  {
                    "input_grid": [
                      [
                        8,
                        8,
                        8,
                        8,
                        8,
                        8,
                        8,
                        8,
                        8,
                        8,
                        8,
                        8,
                        8,
                        8,
                        8,
                        8
                      ],
                      [
                        8,
                        8,
                        2,
                        2,
                        2,
                        2,
                        2,
                        8,
                        8,
                        8,
                        8,
                        8,
                        8,
                        8,
                        8,
                        8
                      ],
                      [
                        8,
                        8,
                        2,
                        1,
                        1,
                        2,
                        2,
                        8,
                        8,
                        8,
                        8,
                        8,
                        8,
                        8,
                        8,
                        8
                      ],
                      [
                        8,
                        8,
                        2,
                        1,
                        2,
                        2,
                        2,
                        8,
                        8,
                        8,
                        2,
                        2,
                        2,
                        2,
                        2,
                        8
                      ],
                      [
                        8,
                        8,
                        2,
                        2,
                        2,
                        2,
                        2,
                        8,
                        8,
                        8,
                        2,
                        2,
                        2,
                        4,
                        2,
                        8
                      ],
                      [
                        8,
                        8,
                        2,
                        2,
                        2,
                        2,
                        2,
                        8,
                        8,
                        8,
                        2,
                        2,
                        2,
                        4,
                        2,
                        8
                      ],
                      [
                        8,
                        8,
                        8,
                        8,
                        8,
                        8,
                        8,
                        8,
                        8,
                        8,
                        2,
                        2,
                        2,
                        2,
                        2,
                        8
                      ],
                      [
                        8,
                        8,
                        8,
                        8,
                        8,
                        8,
                        8,
                        8,
                        8,
                        8,
                        2,
                        2,
                        2,
                        2,
                        2,
                        8
                      ],
                      [
                        8,
                        8,
                        8,
                        2,
                        2,
                        2,
                        2,
                        2,
                        8,
                        8,
                        8,
                        8,
                        8,
                        8,
                        8,
                        8
                      ],
                      [
                        8,
                        8,
                        8,
                        2,
                        2,
                        2,
                        2,
                        2,
                        8,
                        8,
                        8,
                        8,
                        8,
                        8,
                        8,
                        8
                      ],
                      [
                        8,
                        8,
                        8,
                        2,
                        2,
                        2,
                        2,
                        2,
                        8,
                        8,
                        8,
                        8,
                        8,
                        8,
                        8,
                        8
                      ],
                      [
                        8,
                        8,
                        8,
                        2,
                        3,
                        3,
                        3,
                        2,
                        8,
                        8,
                        8,
                        8,
                        8,
                        8,
                        8,
                        8
                      ],
                      [
                        8,
                        8,
                        8,
                        2,
                        2,
                        2,
                        2,
                        2,
                        8,
                        8,
                        8,
                        8,
                        8,
                        8,
                        8,
                        8
                      ],
                      [
                        8,
                        8,
                        8,
                        8,
                        8,
                        8,
                        8,
                        8,
                        8,
                        8,
                        8,
                        8,
                        8,
                        8,
                        8,
                        8
                      ],
                      [
                        8,
                        8,
                        8,
                        8,
                        8,
                        8,
                        8,
                        8,
                        8,
                        8,
                        8,
                        8,
                        8,
                        8,
                        8,
                        8
                      ],
                      [
                        8,
                        8,
                        8,
                        8,
                        8,
                        8,
                        8,
                        8,
                        8,
                        8,
                        8,
                        8,
                        8,
                        8,
                        8,
                        8
                      ]
                    ],
                    "output_grid": [
                      [
                        2,
                        2,
                        2,
                        2,
                        2
                      ],
                      [
                        2,
                        1,
                        1,
                        4,
                        2
                      ],
                      [
                        2,
                        1,
                        2,
                        4,
                        2
                      ],
                      [
                        2,
                        3,
                        3,
                        3,
                        2
                      ],
                      [
                        2,
                        2,
                        2,
                        2,
                        2
                      ]
                    ]
                  }
                ],
                "input_grid": [
                  [
                    2,
                    2,
                    2,
                    2,
                    2,
                    2,
                    2,
                    2,
                    2,
                    2,
                    2,
                    2,
                    2,
                    2
                  ],
                  [
                    2,
                    2,
                    2,
                    2,
                    2,
                    2,
                    2,
                    2,
                    2,
                    2,
                    2,
                    2,
                    2,
                    2
                  ],
                  [
                    2,
                    3,
                    3,
                    3,
                    3,
                    2,
                    2,
                    2,
                    2,
                    2,
                    2,
                    2,
                    2,
                    2
                  ],
                  [
                    2,
                    3,
                    3,
                    3,
                    3,
                    2,
                    2,
                    2,
                    2,
                    2,
                    2,
                    2,
                    2,
                    2
                  ],
                  [
                    2,
                    3,
                    3,
                    1,
                    3,
                    2,
                    2,
                    2,
                    2,
                    2,
                    2,
                    2,
                    2,
                    2
                  ],
                  [
                    2,
                    3,
                    3,
                    3,
                    3,
                    2,
                    2,
                    2,
                    2,
                    2,
                    2,
                    2,
                    2,
                    2
                  ],
                  [
                    2,
                    2,
                    2,
                    2,
                    2,
                    2,
                    2,
                    2,
                    2,
                    2,
                    2,
                    2,
                    2,
                    2
                  ],
                  [
                    2,
                    2,
                    2,
                    2,
                    2,
                    2,
                    2,
                    3,
                    3,
                    3,
                    3,
                    2,
                    2,
                    2
                  ],
                  [
                    2,
                    2,
                    2,
                    2,
                    2,
                    2,
                    2,
                    3,
                    6,
                    6,
                    3,
                    2,
                    2,
                    2
                  ],
                  [
                    2,
                    2,
                    2,
                    2,
                    2,
                    2,
                    2,
                    3,
                    6,
                    3,
                    3,
                    2,
                    2,
                    2
                  ],
                  [
                    2,
                    2,
                    2,
                    2,
                    2,
                    2,
                    2,
                    3,
                    3,
                    3,
                    3,
                    2,
                    2,
                    2
                  ],
                  [
                    2,
                    2,
                    2,
                    2,
                    2,
                    2,
                    2,
                    2,
                    2,
                    2,
                    2,
                    2,
                    2,
                    2
                  ],
                  [
                    2,
                    2,
                    2,
                    2,
                    2,
                    2,
                    2,
                    2,
                    2,
                    2,
                    2,
                    2,
                    2,
                    2
                  ],
                  [
                    2,
                    2,
                    2,
                    2,
                    2,
                    2,
                    2,
                    2,
                    2,
                    2,
                    2,
                    2,
                    2,
                    2
                  ]
                ]
              },
              "outputs": {
                "output_grid": [
                  [
                    3,
                    3,
                    3,
                    3
                  ],
                  [
                    3,
                    3,
                    3,
                    3
                  ],
                  [
                    3,
                    3,
                    1,
                    3
                  ],
                  [
                    3,
                    3,
                    3,
                    3
                  ]
                ],
                "stdout": "",
                "stderr": ""
              },
              "reward": 0.8125
            },
            {
              "inputs": {
                "examples": [
                  {
                    "input_grid": [
                      [
                        2,
                        2,
                        2,
                        2,
                        2,
                        2,
                        2,
                        2,
                        2,
                        2,
                        2,
                        2,
                        2,
                        2
                      ],
                      [
                        2,
                        2,
                        2,
                        2,
                        2,
                        2,
                        2,
                        2,
                        2,
                        2,
                        2,
                        2,
                        2,
                        2
                      ],
                      [
                        2,
                        3,
                        3,
                        3,
                        3,
                        2,
                        2,
                        2,
                        2,
                        2,
                        2,
                        2,
                        2,
                        2
                      ],
                      [
                        2,
                        3,
                        3,
                        3,
                        3,
                        2,
                        2,
                        2,
                        2,
                        2,
                        2,
                        2,
                        2,
                        2
                      ],
                      [
                        2,
                        3,
                        3,
                        1,
                        3,
                        2,
                        2,
                        2,
                        2,
                        2,
                        2,
                        2,
                        2,
                        2
                      ],
                      [
                        2,
                        3,
                        3,
                        3,
                        3,
                        2,
                        2,
                        2,
                        2,
                        2,
                        2,
                        2,
                        2,
                        2
                      ],
                      [
                        2,
                        2,
                        2,
                        2,
                        2,
                        2,
                        2,
                        2,
                        2,
                        2,
                        2,
                        2,
                        2,
                        2
                      ],
                      [
                        2,
                        2,
                        2,
                        2,
                        2,
                        2,
                        2,
                        3,
                        3,
                        3,
                        3,
                        2,
                        2,
                        2
                      ],
                      [
                        2,
                        2,
                        2,
                        2,
                        2,
                        2,
                        2,
                        3,
                        6,
                        6,
                        3,
                        2,
                        2,
                        2
                      ],
                      [
                        2,
                        2,
                        2,
                        2,
                        2,
                        2,
                        2,
                        3,
                        6,
                        3,
                        3,
                        2,
                        2,
                        2
                      ],
                      [
                        2,
                        2,
                        2,
                        2,
                        2,
                        2,
                        2,
                        3,
                        3,
                        3,
                        3,
                        2,
                        2,
                        2
                      ],
                      [
                        2,
                        2,
                        2,
                        2,
                        2,
                        2,
                        2,
                        2,
                        2,
                        2,
                        2,
                        2,
                        2,
                        2
                      ],
                      [
                        2,
                        2,
                        2,
                        2,
                        2,
                        2,
                        2,
                        2,
                        2,
                        2,
                        2,
                        2,
                        2,
                        2
                      ],
                      [
                        2,
                        2,
                        2,
                        2,
                        2,
                        2,
                        2,
                        2,
                        2,
                        2,
                        2,
                        2,
                        2,
                        2
                      ]
                    ],
                    "output_grid": [
                      [
                        3,
                        3,
                        3,
                        3
                      ],
                      [
                        3,
                        6,
                        6,
                        3
                      ],
                      [
                        3,
                        6,
                        1,
                        3
                      ],
                      [
                        3,
                        3,
                        3,
                        3
                      ]
                    ]
                  }
                ],
                "input_grid": [
                  [
                    8,
                    8,
                    8,
                    8,
                    8,
                    8,
                    8,
                    8,
                    8,
                    8,
                    8,
                    8,
                    8,
                    8,
                    8,
                    8
                  ],
                  [
                    8,
                    8,
                    2,
                    2,
                    2,
                    2,
                    2,
                    8,
                    8,
                    8,
                    8,
                    8,
                    8,
                    8,
                    8,
                    8
                  ],
                  [
                    8,
                    8,
                    2,
                    1,
                    1,
                    2,
                    2,
                    8,
                    8,
                    8,
                    8,
                    8,
                    8,
                    8,
                    8,
                    8
                  ],
                  [
                    8,
                    8,
                    2,
                    1,
                    2,
                    2,
                    2,
                    8,
                    8,
                    8,
                    2,
                    2,
                    2,
                    2,
                    2,
                    8
                  ],
                  [
                    8,
                    8,
                    2,
                    2,
                    2,
                    2,
                    2,
                    8,
                    8,
                    8,
                    2,
                    2,
                    2,
                    4,
                    2,
                    8
                  ],
                  [
                    8,
                    8,
                    2,
                    2,
                    2,
                    2,
                    2,
                    8,
                    8,
                    8,
                    2,
                    2,
                    2,
                    4,
                    2,
                    8
                  ],
                  [
                    8,
                    8,
                    8,
                    8,
                    8,
                    8,
                    8,
                    8,
                    8,
                    8,
                    2,
                    2,
                    2,
                    2,
                    2,
                    8
                  ],
                  [
                    8,
                    8,
                    8,
                    8,
                    8,
                    8,
                    8,
                    8,
                    8,
                    8,
                    2,
                    2,
                    2,
                    2,
                    2,
                    8
                  ],
                  [
                    8,
                    8,
                    8,
                    2,
                    2,
                    2,
                    2,
                    2,
                    8,
                    8,
                    8,
                    8,
                    8,
                    8,
                    8,
                    8
                  ],
                  [
                    8,
                    8,
                    8,
                    2,
                    2,
                    2,
                    2,
                    2,
                    8,
                    8,
                    8,
                    8,
                    8,
                    8,
                    8,
                    8
                  ],
                  [
                    8,
                    8,
                    8,
                    2,
                    2,
                    2,
                    2,
                    2,
                    8,
                    8,
                    8,
                    8,
                    8,
                    8,
                    8,
                    8
                  ],
                  [
                    8,
                    8,
                    8,
                    2,
                    3,
                    3,
                    3,
                    2,
                    8,
                    8,
                    8,
                    8,
                    8,
                    8,
                    8,
                    8
                  ],
                  [
                    8,
                    8,
                    8,
                    2,
                    2,
                    2,
                    2,
                    2,
                    8,
                    8,
                    8,
                    8,
                    8,
                    8,
                    8,
                    8
                  ],
                  [
                    8,
                    8,
                    8,
                    8,
                    8,
                    8,
                    8,
                    8,
                    8,
                    8,
                    8,
                    8,
                    8,
                    8,
                    8,
                    8
                  ],
                  [
                    8,
                    8,
                    8,
                    8,
                    8,
                    8,
                    8,
                    8,
                    8,
                    8,
                    8,
                    8,
                    8,
                    8,
                    8,
                    8
                  ],
                  [
                    8,
                    8,
                    8,
                    8,
                    8,
                    8,
                    8,
                    8,
                    8,
                    8,
                    8,
                    8,
                    8,
                    8,
                    8,
                    8
                  ]
                ]
              },
              "outputs": {
                "output_grid": [
                  [
                    2,
                    2,
                    2,
                    2,
                    2
                  ],
                  [
                    2,
                    1,
                    1,
                    2,
                    2
                  ],
                  [
                    2,
                    1,
                    2,
                    2,
                    2
                  ],
                  [
                    2,
                    2,
                    2,
                    2,
                    2
                  ],
                  [
                    2,
                    2,
                    2,
                    2,
                    2
                  ]
                ],
                "stdout": "",
                "stderr": ""
              },
              "reward": 0.800000011920929
            }
          ],
          "seed_candidates": [
            {
              "examples": [],
              "python_script": "\ndef transform(inputs):\n    # TODO implement the python function to transform the input grid into the output grid\n    return {\"output_grid\": inputs.get(\"input_grid\")}\n    \nresult = transform(inputs)\n"
            }
          ],
          "candidates": [
            {
              "python_script": "def transform(inputs):\n    grid = inputs['input_grid']\n    if not grid or not grid[0]:\n        return {'output_grid': []}\n    rows = len(grid)\n    cols = len(grid[0])\n    # Robust background detection: find colors present in all border cells\n    from collections import Counter\n    top_border = Counter(grid[0])\n    bottom_border = Counter(grid[-1])\n    left_border = Counter(row[0] for row in grid)\n    right_border = Counter(row[-1] for row in grid)\n    all_borders = top_border & bottom_border & left_border & right_border\n    if not all_borders:\n        background = grid[0][0]  # fallback\n    else:\n        background = max(all_borders, key=all_borders.get)  # most common in all borders\n    \n    visited = set()\n    def get_component(r, c):\n        component = []\n        stack = [(r, c)]\n        while stack:\n            cr, cc = stack.pop()\n            if (cr, cc) in visited or grid[cr][cc] == background:\n                continue\n            visited.add((cr, cc))\n            component.append((cr, cc))\n            for dr, dc in [(-1, 0), (1, 0), (0, -1), (0, 1)]:\n                nr, nc = cr + dr, cc + dc\n                if 0 <= nr < rows and 0 <= nc < cols:\n                    stack.append((nr, nc))\n        return component\n    \n    components = []\n    for r in range(rows):\n        for c in range(cols):\n            if grid[r][c] != background and (r, c) not in visited:\n                comp = get_component(r, c)\n                if comp:\n                    components.append(comp)\n    \n    if not components:\n        return {'output_grid': []}\n    \n    # Select the component containing '1', else the one with largest max_r\n    selected_comp = None\n    for comp in components:\n        if any(grid[r][c] == 1 for r, c in comp):\n            selected_comp = comp\n            break\n    if not selected_comp:\n        selected_comp = max(components, key=lambda comp: max(r for r, c in comp))\n    \n    min_r = min(r for r, c in selected_comp)\n    max_r = max(r for r, c in selected_comp)\n    min_c = min(c for r, c in selected_comp)\n    max_c = max(c for r, c in selected_comp)\n    output = [row[min_c:max_c+1] for row in grid[min_r:max_r+1]]\n    \n    # Collect and place all non-background colors from other components at relative positions\n    for other_comp in components:\n        if other_comp == selected_comp:\n            continue\n        other_min_r = min(r for r, c in other_comp)\n        other_min_c = min(c for r, c in other_comp)\n        has_one = any(grid[r][c] == 1 for r, c in other_comp)\n        for r, c in other_comp:\n            rel_r = r - other_min_r\n            rel_c = c - other_min_c\n            if other_min_c == min_c and not has_one:\n                rel_c -= 1\n            # Only place if within output bounds and on background\n            if 0 <= rel_r < len(output) and 0 <= rel_c < len(output[0]) and output[rel_r][rel_c] == background:\n                output[rel_r][rel_c] = grid[r][c]\n    \n    # Trim trailing columns if wider than tall and all background\n    while len(output) > 0 and len(output[0]) > len(output) and all(row[-1] == background for row in output):\n        output = [row[:-1] for row in output]\n    \n    return {'output_grid': output}\nresult = transform(inputs)",
              "examples": [],
              "reward": 0.7222222089767456
            },
            {
              "python_script": "def transform(inputs):\n    grid = inputs['input_grid']\n    if not grid or not grid[0]:\n        return {'output_grid': []}\n    background = grid[0][0]\n    rows = len(grid)\n    cols = len(grid[0])\n    import collections\n    def get_component(r, c, visited):\n        stack = [(r, c)]\n        component = []\n        while stack:\n            cr, cc = stack.pop()\n            if (cr, cc) in visited or grid[cr][cc] == background:\n                continue\n            visited.add((cr, cc))\n            component.append((cr, cc))\n            for dr, dc in [(-1,0),(1,0),(0,-1),(0,1)]:\n                nr, nc = cr + dr, cc + dc\n                if 0 <= nr < rows and 0 <= nc < cols and (nr, nc) not in visited:\n                    stack.append((nr, nc))\n        return component\n    visited = set()\n    components = []\n    for r in range(rows):\n        for c in range(cols):\n            if grid[r][c] != background and (r, c) not in visited:\n                comp = get_component(r, c, visited)\n                components.append(comp)\n    if not components:\n        return {'output_grid': []}\n    # Select the component with the smallest max_r\n    selected_comp = min(components, key=lambda comp: max(r for r, c in comp))\n    min_r = min(r for r, c in selected_comp)\n    max_r = max(r for r, c in selected_comp)\n    min_c = min(c for r, c in selected_comp)\n    max_c = max(c for r, c in selected_comp)\n    output = [row[min_c:max_c+1] for row in grid[min_r:max_r+1]]\n    # Get colors in selected component\n    selected_colors = set(grid[r][c] for r, c in selected_comp)\n    # Overlay colors from other components not in selected_colors\n    for other_comp in components:\n        if other_comp == selected_comp:\n            continue\n        other_colors = set(grid[r][c] for r, c in other_comp)\n        if other_colors - selected_colors:\n            other_min_r = min(r for r, c in other_comp)\n            other_min_c = min(c for r, c in other_comp)\n            for r, c in other_comp:\n                if grid[r][c] not in selected_colors:\n                    rel_r = r - other_min_r\n                    rel_c = c - other_min_c\n                    if 0 <= rel_r < len(output) and 0 <= rel_c < len(output[0]):\n                        output[rel_r][rel_c] = grid[r][c]\n    return {'output_grid': output}\nresult = transform(inputs)",
              "examples": [],
              "reward": 1.0
            }
          ],
          "best_candidates": [
            {
              "python_script": "def transform(inputs):\n    grid = inputs['input_grid']\n    if not grid or not grid[0]:\n        return {'output_grid': []}\n    background = grid[0][0]\n    rows = len(grid)\n    cols = len(grid[0])\n    import collections\n    def get_component(r, c, visited):\n        stack = [(r, c)]\n        component = []\n        while stack:\n            cr, cc = stack.pop()\n            if (cr, cc) in visited or grid[cr][cc] == background:\n                continue\n            visited.add((cr, cc))\n            component.append((cr, cc))\n            for dr, dc in [(-1,0),(1,0),(0,-1),(0,1)]:\n                nr, nc = cr + dr, cc + dc\n                if 0 <= nr < rows and 0 <= nc < cols and (nr, nc) not in visited:\n                    stack.append((nr, nc))\n        return component\n    visited = set()\n    components = []\n    for r in range(rows):\n        for c in range(cols):\n            if grid[r][c] != background and (r, c) not in visited:\n                comp = get_component(r, c, visited)\n                components.append(comp)\n    if not components:\n        return {'output_grid': []}\n    # Select the component with the smallest max_r\n    selected_comp = min(components, key=lambda comp: max(r for r, c in comp))\n    min_r = min(r for r, c in selected_comp)\n    max_r = max(r for r, c in selected_comp)\n    min_c = min(c for r, c in selected_comp)\n    max_c = max(c for r, c in selected_comp)\n    output = [row[min_c:max_c+1] for row in grid[min_r:max_r+1]]\n    # Get colors in selected component\n    selected_colors = set(grid[r][c] for r, c in selected_comp)\n    # Overlay colors from other components not in selected_colors\n    for other_comp in components:\n        if other_comp == selected_comp:\n            continue\n        other_colors = set(grid[r][c] for r, c in other_comp)\n        if other_colors - selected_colors:\n            other_min_r = min(r for r, c in other_comp)\n            other_min_c = min(c for r, c in other_comp)\n            for r, c in other_comp:\n                if grid[r][c] not in selected_colors:\n                    rel_r = r - other_min_r\n                    rel_c = c - other_min_c\n                    if 0 <= rel_r < len(output) and 0 <= rel_c < len(output[0]):\n                        output[rel_r][rel_c] = grid[r][c]\n    return {'output_grid': output}\nresult = transform(inputs)",
              "examples": [],
              "reward": 1.0
            },
            {
              "python_script": "def transform(inputs):\n    grid = inputs['input_grid']\n    if not grid or not grid[0]:\n        return {'output_grid': []}\n    rows = len(grid)\n    cols = len(grid[0])\n    # Robust background detection: find colors present in all border cells\n    from collections import Counter\n    top_border = Counter(grid[0])\n    bottom_border = Counter(grid[-1])\n    left_border = Counter(row[0] for row in grid)\n    right_border = Counter(row[-1] for row in grid)\n    all_borders = top_border & bottom_border & left_border & right_border\n    if not all_borders:\n        background = grid[0][0]  # fallback\n    else:\n        background = max(all_borders, key=all_borders.get)  # most common in all borders\n    \n    visited = set()\n    def get_component(r, c):\n        component = []\n        stack = [(r, c)]\n        while stack:\n            cr, cc = stack.pop()\n            if (cr, cc) in visited or grid[cr][cc] == background:\n                continue\n            visited.add((cr, cc))\n            component.append((cr, cc))\n            for dr, dc in [(-1, 0), (1, 0), (0, -1), (0, 1)]:\n                nr, nc = cr + dr, cc + dc\n                if 0 <= nr < rows and 0 <= nc < cols:\n                    stack.append((nr, nc))\n        return component\n    \n    components = []\n    for r in range(rows):\n        for c in range(cols):\n            if grid[r][c] != background and (r, c) not in visited:\n                comp = get_component(r, c)\n                if comp:\n                    components.append(comp)\n    \n    if not components:\n        return {'output_grid': []}\n    \n    # Select the component with the largest max_r\n    selected_comp = max(components, key=lambda comp: max(r for r, c in comp))\n    min_r = min(r for r, c in selected_comp)\n    max_r = max(r for r, c in selected_comp)\n    min_c = min(c for r, c in selected_comp)\n    max_c = max(c for r, c in selected_comp)\n    output = [row[min_c:max_c+1] for row in grid[min_r:max_r+1]]\n    \n    # Collect and place all non-background colors from other components at relative positions\n    for other_comp in components:\n        if other_comp == selected_comp:\n            continue\n        other_min_r = min(r for r, c in other_comp)\n        other_min_c = min(c for r, c in other_comp)\n        for r, c in other_comp:\n            rel_r = r - other_min_r\n            rel_c = c - other_min_c\n            # Only place if within output bounds\n            if 0 <= rel_r < len(output) and 0 <= rel_c < len(output[0]):\n                output[rel_r][rel_c] = grid[r][c]\n    \n    return {'output_grid': output}\nresult = transform(inputs)",
              "examples": [],
              "reward": 0.7777777910232544
            }
          ],
          "history": [],
          "nb_visit": 1,
          "cumulative_reward": 0.800000011920929,
          "python_script": "def transform(inputs):\n    grid = inputs['input_grid']\n    if not grid or not grid[0]:\n        return {'output_grid': []}\n    background = grid[0][0]\n    rows = len(grid)\n    cols = len(grid[0])\n    import collections\n    def get_component(r, c, visited):\n        stack = [(r, c)]\n        component = []\n        while stack:\n            cr, cc = stack.pop()\n            if (cr, cc) in visited or grid[cr][cc] == background:\n                continue\n            visited.add((cr, cc))\n            component.append((cr, cc))\n            for dr, dc in [(-1,0),(1,0),(0,-1),(0,1)]:\n                nr, nc = cr + dr, cc + dc\n                if 0 <= nr < rows and 0 <= nc < cols and (nr, nc) not in visited:\n                    stack.append((nr, nc))\n        return component\n    visited = set()\n    components = []\n    for r in range(rows):\n        for c in range(cols):\n            if grid[r][c] != background and (r, c) not in visited:\n                comp = get_component(r, c, visited)\n                components.append(comp)\n    if not components:\n        return {'output_grid': []}\n    # Select the component with the smallest max_r\n    selected_comp = min(components, key=lambda comp: max(r for r, c in comp))\n    min_r = min(r for r, c in selected_comp)\n    max_r = max(r for r, c in selected_comp)\n    min_c = min(c for r, c in selected_comp)\n    max_c = max(c for r, c in selected_comp)\n    output = [row[min_c:max_c+1] for row in grid[min_r:max_r+1]]\n    # Get colors in selected component\n    selected_colors = set(grid[r][c] for r, c in selected_comp)\n    # Overlay colors from other components not in selected_colors\n    for other_comp in components:\n        if other_comp == selected_comp:\n            continue\n        other_colors = set(grid[r][c] for r, c in other_comp)\n        if other_colors - selected_colors:\n            other_min_r = min(r for r, c in other_comp)\n            other_min_c = min(c for r, c in other_comp)\n            for r, c in other_comp:\n                if grid[r][c] not in selected_colors:\n                    rel_r = r - other_min_r\n                    rel_c = c - other_min_c\n                    if 0 <= rel_r < len(output) and 0 <= rel_c < len(output[0]):\n                        output[rel_r][rel_c] = grid[r][c]\n    return {'output_grid': output}\nresult = transform(inputs)"
        }
      }
    },
    "non_trainable_variables": {},
    "optimizer_trainable_variables": {},
    "optimizer_non_trainable_variables": {
      "omega_361": {
        "iterations_omega_361": {
          "iterations": 0,
          "epochs": 0
        }
      }
    },
    "metrics_variables": {
      "reward": {
        "total_with_count": {
          "total": 0.0,
          "count": 0
        }
      }
    }
  }
}